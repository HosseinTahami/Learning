Django ORM:
Object Relational Mapper
|
|__ <Class Name>.objects.all() / .filter() / .order_by() / .count() / .get() / .first() / ...
        |
        |__This is a query set object not a list

<Class Name>.objects.get(pk=1 or id=1)
            |
            |__This is an object not a query set

<Class Name>.objects.filter(pk=1).first() / .exist()
                                                |__ we get boolean

-------------------------------------------------------------------------------

from django.core.exceptions import ObjectDoesNotExist
|
|__ use try and except ObjectDoesNotExist

------------------------------- QuerySet Api -----------------------------------

Field lookups:
exact, iexact, contains, in, gt, lt, lte, startwith, istartwith, ...

Example: 
         Product.objects.filter(price__gt=20) --> price greater than 20

         Product.objects.filter(price__range=(20, 30))

         Product.objects.filter(collection__id=1) --> we will get the products with collection with id number 1
         |__ so id is an attribute of collection and collection is an attribute of Product !

         Product.objects.filter(last_update__year=2010 )
         |__ last_update is an attribute of Product that is Date & Time Type
             so you can use anything like __year, __month , __hour, ... with it !

         Product.objects.filter(description__isnull=True)
         |__ __isnull checks for an attribute to be empty or not !

         Product.objects.filter(id__in=[1, 3, 4, 6])
         |
         |__ show all the objects with id inside the given list!
-------------------------------  More Complex Query  ---------------------------------------

from django.db.models import Q
queryset = Product.objects.filter(Q(price__lt=12) | Q(inventory__gt=20))
                |___ <|> or / <&> and / <~> not / ...

from django.bd.models import F
queryset = Product.objects.filter(price=F('inventory'))
                |__ price and inventory are both Product attributes
                    but if I want to have both of them at the same Time
                    in one Query I use F module !
queryset = Product.objects.filter(inventory=F('collection__id'))

-----------------------------  Order in Query  ----------------------------------------

.order_by()

Example:

Product.objects.filter('unit_price', '-title')
        |__ this will sort products base on price and if 
            there was multiple products with same price 
            it will be sorted by their title !
                |__ also the the negative behind title is for 
                    ascending and descending !

.reverse(): will reverse all of the data from the Head to the Bottom for above !

Product.objects.order_by('price')[0] --> First data / Product.objects.earliest('price')
Product.objects.order_by('price')[-1] --> last data / Product.objects.latest('price')

----------------------------  Limit  ----------------------------------

Product.objects.all()[:5] --> 0, 1, 2, 3, 4
Product.objects.all()[5:10] --> 5, 6, 7, 8, 9

---------------------------  Values  ----------------------------------

Product.objects.values('id', 'title')
|
|__ Only gives these two and not other columns of the table!

Product.objects.values('id', 'title', 'collection__title')
|
|__ <collection__title> JOIN the collection and product 
    Tables to each other!
    |
    |__  In this form each object will be in a dictionary with 3 Keys: 1.id | 2.title | 3.collection__title

Product.objects.values_list('id', 'title', 'collection__title')
|
|__ in this form each  object will be in a Tuple

*NOTE*: .distinct() will remove all the duplicates
*NOTE*: when you use ForeignKey for example bring Product inside the 
        OrderItem class with it , django automatically create product_id
        to use it as the foreign key !

.only() works like .values() you can only access the columns you want but if you choose a column 
that is not inside .only() it will find it and will take lots of time but in .values() because we 
have dictionary we don't have this problem ! --> .defer() is exactly opposite of .only()