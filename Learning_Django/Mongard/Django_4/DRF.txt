API is a connection between DataBase
and different apps !
 
 ------------------------------------------

 1- pip install djangorestframework
 2- add 'rest_framework' in INSTALLED_APPS
 
 ------------- Function Views ------------------

 from rest_framework.decorators import api_view
 from rest_framework.response import Response

 @api_view(['GET', 'POST',...])
 def first(request):
    return Response(data) --> data: should be dictionary

# Response take a dict and convert it to json

-------------- Class Base Views --------------------

from rest_framework.views import APIView
from rest_framework.response import Response

class First(APIView):
    def get(self, request):
        return Response(data)
    
    def put...

    def post...


----------------------------------------------------

query parameters : ?name="name you want"
|
|==> request.query_params['name']

url: localhost/first/Hossein
|
|==> request.GET['name']

request.data returns the parsed content of the request body. 

------------------  Serializers  -----------------------------

Serializers allow complex data such as querysets and model instances
to be converted to native Python datatypes that can then be easily
rendered into JSON, XML or other content types.
Serializers also provide deserialization, allowing parsed data to be
converted back into complex types, after first validating the incoming data.

from rest_framework import Serializers

class NameSerializer(serializers.Serializer):

class NameSerializer(serializers.ModelSerializer):



Field Level Validation:

def <fieldname_validation> (self, value):
    if ...
        raise serializers.ValidationError('...')


Object Level Validation:

def validate(self, data):
    if data[...]:
        raise serializers.ValidationError('...')

Validator:

def ...(value):
    ....

specific_field = ...Field(validators=[...])

---------------- STATUS CODES ----------------

from rest_framework import status
return Response(status=status.HTTP_...)

1- Informational 
2- Successful
|==> 200: OK

3- Redirect to other page
|
|==> 301: Moved Permanently
|==> 302: Moved Temporarily
|==> 304: Read From Cache

4- Client Error
|==> 404: Page Not Found
|==> 403: Permission Denied

5- Server Error
|==> 500: Internal Server Error
|==> 503: Server Unavailable

--------------------- Authentication ---------------------

request.user --> user info

request.auth --> user authentication info

---------- Token Authentication ------------

INSTALLED_APPS = [
    'rest_framework.authtoken',
]

from rest_framework.authtoken import views as auth_token

urlpatterns = [
    path('token/', auth_token.obtain_auth_token)
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework.authentication.TokenAuthentication',
        
    ]
}

--------------- Permission ---------------
|
|==> Postman: Inside Header
                |
                |==> Authorization: Token (Token Code Itself)

AllowAny: everyone | by default 

IsAuthenticated: Only Authenticated Users

IsAdminUser: Authenticated & Admin Users

IsAuthenticatedOrReadOnly: Authenticate Users Can Change others only can read


-----------------  ViewSets  --------------------

def list --> list all obj

def create --> Create new obj

def retrieve --> find one specific obj

def update --> update a obj or if not found it will be created

def partial_update --> update only part of an obj

def destroy --> delete an obj

-----------------  Router  --------------------

from rest_framework import routers

router = routers.SimpleRouter()
router.register('prefix', views.NameViewSet)
urlpatterns += router.urls