---------------------------------- Commands -----------------------------

docker login

docker images

docker pull <An Image Name> ===> docker pull hello-world

docker ps ===> show all of the running containers

docker ps -a ===> show all of the containers even those that are not running

docker run <An Image Name> ===> docker run hello-world

docker container ls ===> list all of the running containers

docker container ls -a 

docker run --name <container name you want to create> <An Image Name>

docker run --name Hossein_Hello hello-world

docker rm <container name> ===> docker rm Hossein_Hello

docker container prune ===> delete all stopped containers

docker rmi <An Image Name> ===> docker rmi hello-world

docker run -rm <An Image Name> ===> will delete the container after running

docker run -it -rm <An Image Name> ===> -it  means interactive and wont stop

docker <whatever you want> help ===> docker container help

docker container prune ===> delete all stopped containers

docker run -d <An Image Name> ===> docker run -d redis -----> for detach running in the background !

docker run -itd <An Image Name> ===> docker run -itd busybox ---> the -it is for making busybox interactive

docker create --name <Container Name> <An Image Name>
|
|
|===> docker create --name Hossein_Ubuntu ubuntu
                |
                |===> this will only create the container but wont run it !

docker start < > ===> after you create a container you can start it with this command

docker stop < > ==> stops the container slowly and make sure that container is not in the middle of something

docker restart < > 

docker kill < > ==> stops the container even if its middle of something 

docker pause < > ==> wont stop the container but pause it 

docker unpause < > ==> un pause the container

docker exec (Container Name) (command you want)
|
|==> docker exec Hossein_Ubuntu ls ==> docker exec -it (container name) (bash or sh)

Restart Policy:

- always | - unless-stopped | - on-failed

docker run -it --restart (restart policy) (container name)

--------------- Dockerfile reference -----------------------
FROM

LABEL

WORKDIR

COPY 

CMD []

command: docker image build -t (image name):(tag) (where is dockerfile)
|
|===> if dockerfile is exactly where you are only put an . 
    |
    |===> docker image build -t hossein_image:2.2 .


------------------------------------------------------------------------------------

docker image tag (image name:tag) (docker hub username)/(image name:tag)
                    |
                    |==> the image you want to change its name so you can push it !

docker push (docker hub username)/(image name:tag)



------------------------------------ Port Forwarding -------------------------------

-p (first port):(second port) 
==> first port is for your local computer
==> second port is for the container

docker run -d --name redis_test -p 3030:6379 redis

docker exec -it redis_test bash
redis-cli
get name

------------------------------------------------------------------------------------

docker save -o (name you want.tar) (An Image Name:tag)

docker load -i (name of the file.tar)

docker image inspect (image name)

docker  commit (container name) (image name you want to create:tag)    |     docker commit -a "HosseinTahami" -m "added a.txt" ubn ubuntu:txt
|
|==> this will create a new image from the container

docker diff (container name) 
|
|===> shows the changes in the container | A : add, C: change, D: delete

----------------------------------  volume  ----------------------------------------------

docker volume ls

docker volume prune

docker volume create (name)

docker volume rm (name)

docker volume inspect (name)

docker run -itd --name (container name) -v (volume name):/(what you want to save from your image) (image name)
|
|==> example: docker run -itd --name alp -v V1:/home alpine

so after saving all the data you wanted inside your volume 
even if you delete your container you can attach a new container 
to a specific volume you want ! ==> with the exact upper command


---------------------------------- network ------------------------------------------

docker network ls

docker network create (Network Name)

docker network inspect (Network Name)

docker run -itd --name (container name) (image name)
docker run -itd --name (container name) (image name)
|
|==> now we have two separate containers

docker network connect (Network Name) (first Container)
docker network connect (Network Name) (Second Container)

docker network inspect (Network Name)

For example you have 2 container named pypy from python image and ubn from ubuntu image
and you connect them through NN network that you created so if you go inside pypy with 
command docker exec -it pypy bash and when you are inside then write ( ping ubn ) then
you will see that these 2 containers are connected to each other !